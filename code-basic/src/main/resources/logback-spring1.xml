<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- spring-boot的路径下面有一些配置文件，默认的情况下会使用base.xml，它把日志输出到控制台和文件之中 -->
    <include resource="org/springframework/boot/logging/logback/base.xml"/>

    <!-- Step 1：通过springProperty标签直接读取application.yml中的配置-->
    <springProperty name="app_name" scope="context" source="sxw.config.app-name"/>
    <springProperty name="app_env" scope="context" source="spring.profiles.active"/>

    <!-- Step 2：定义变量 -->
    <!-- 定义日志输出路径 -->
    <property name="LOG_PATH" value="./logs/${app_name}"/>
    <!-- 声明单个日志文件的最大值 -->
    <property name="MAX_FILE_SIZE" value="100MB"/>
    <!-- 声明日志保留的最大周期,单位：天 -->
    <property name="MAX_HISTORY" value="30"/>
    <!-- 声明日志总大小容量 -->
    <property name="TOTAL_SIZE_CAP" value="5GB"/>
    <!-- 声明异步日志队列大小,默认值为256 -->
    <property name="ASYNC_QUEUE_SIZE" value="1000"/>
    <!-- 声明日志丢失率(默认的：如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志) -->
    <property name="ASYNC_DISCARDING_THRESHOLD" value="0"/>
    <!-- 声明异日志答应格式 -->
    <property name="LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%X{User-Id}] [%X{Trace-Id}] [%logger{36}]: %msg%n"/>

    <!-- Step 3：定义日志规则 -->
    <!-- 3.1：控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.out</target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
    <!-- 3.2：业务日志 -->
    <appender name="BIZ" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${app_name}-biz-${app_env}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/bak/${app_name}-biz-${app_env}-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
    </appender>
    <appender name="ASYNC_BIZ" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="BIZ"/>
        <queueSize>${ASYNC_QUEUE_SIZE}</queueSize>
        <discardingThreshold>${ASYNC_DISCARDING_THRESHOLD}</discardingThreshold>
    </appender>
    <!-- 3.3：默认日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${app_name}-stdout-${app_env}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/bak/${app_name}-stdout-${app_env}-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
    </appender>
    <appender name="ASYNC_STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="STDOUT"/>
        <queueSize>${ASYNC_QUEUE_SIZE}</queueSize>
        <discardingThreshold>${ASYNC_DISCARDING_THRESHOLD}</discardingThreshold>
    </appender>

    <!-- Step 4：定义自定义日志和第三方日志控制 -->
    <logger name="org.springframework" level="WARN" additivity="true"/>
    <logger name="org.springframework.boot.autoconfigure.logging" level="WARN" additivity="true"/>


    <!-- Step 5：日志输出：两份不同格式相同内容的日志 -->
    <!-- 5.1：业务日志 -->
    <logger name="cn.sxw" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_BIZ"/>
    </logger>
    <!-- 5.2：默认日志 -->
    <root level="INFO">
        <appender-ref ref="ASYNC_STDOUT"/>
    </root>

</configuration>
